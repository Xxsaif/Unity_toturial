using Unity.VisualScripting;
using UnityEngine;

public class PlayerMotor : MonoBehaviour
{
    private CharacterController controller;
    private Vector3 playerVelocity;

    public bool isGrounded;
    public float gravity;

    public float speed = 5f;
    public float runSpeed;
    public float jumpHeight;

    private float stamina = 5f; // stamina i sekunder
    private float maxStamina = 5f;
    private float staminaRegenRate = 1f; // stamina regenration speed

    private bool isSprinting = false;

    void Start()
    {
        controller = GetComponent<CharacterController>();
        gravity = -40f;
        jumpHeight = 1.0f;
        runSpeed = 10f;
    }

    void Update()
    {
        isGrounded = controller.isGrounded;

        HandleSprint();
        RegenerateStamina();
    }

    public void ProcessMove(Vector2 input)
    {
        Vector3 moveDirection = Vector3.zero;
        moveDirection.x = input.x;
        moveDirection.z = input.y;

        controller.Move(transform.TransformDirection(moveDirection) * speed * Time.deltaTime);

        playerVelocity.y += gravity * Time.deltaTime;

        if (isGrounded && playerVelocity.y < 0)
            playerVelocity.y = -2;

        controller.Move(playerVelocity * Time.deltaTime);
    }

    private void HandleSprint()
    {
        if (Input.GetKey(KeyCode.LeftShift) && stamina > 0)
        {
            Sprint();
            stamina -= Time.deltaTime; // drain stamina 
        }
        else
        {
            StopSprint();
        }
    }

    private void RegenerateStamina()
    {
        if (!isSprinting && stamina < maxStamina)
        {
            stamina += staminaRegenRate * Time.deltaTime; // restore stamina gradually
        }
    }

    public void Sprint()
    {
        if (!isSprinting)
        {
            isSprinting = true;
            speed = runSpeed;
        }
    }

    public void StopSprint()
    {
        if (isSprinting)
        {
            isSprinting = false;
            speed = 5f;
        }
    }

    public void Jump()
    {
        if (isGrounded)
        {
            playerVelocity.y = Mathf.Sqrt(jumpHeight * -3.0f * gravity);
        }
    }
}
